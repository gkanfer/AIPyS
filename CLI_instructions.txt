First image is selcted and the location to the image is inserted:

python .\AIPyS\CLI\set_parameters.py --Image_name D:\Gil\images\pex_project\20X\WT\3_XY01.tif

For mesuring the file we will run the aipys parameter

python .\AIPyS\CLI\aipys.py --option measDia

For 20x object we measure length of 60 so no lets update the estameted cell diameter in the parametr table:

python .\AIPyS\CLI\set_parameters.py --diameter 60

No we will creat a video of segmanted images, so beside seting the diametr one will have to define number of images to include in the segmentation anlysis
by the flag imageN, ina ddation name of the video name and the location of the segmented imzge sequance report. 
Tow more flag are importeed from the cellpose module. first is "channels" and the second will be "model_type". 

python .\AIPyS\CLI\set_parameters.py --videoName ImageSeqcp.avi --data_dir D:\Gil\images\pex_project\20X\PEX3 --imagesN 5 --outPath D:\Gil\images\pex_project\AIPyS_output_images --videoName ImageSeqcp.avi --model_type cyto --channels greyscale

lets create the cellpose segmentation image sequance:

python .\AIPyS\CLI\aipys.py --option cp_seg_video

Next granularty analysis will be created were opening operation will created and saved into the dedicated folder.
few parameters need to be set for this analysis:

python .\AIPyS\CLI\set_parameters.py --videoName GranMeasVideo_cp.avi  --start_kernel 2 --end_karnel 50 --kernel_size 20 --extract_pixel 50 --resize_pixel 150 --outputImageSize 500

runing the granularity image genrator
python .\AIPyS\CLI\aipys.py --option cp_gran_video

The next function will save single cell images from input images and create a table of intnsity per cells which user will amnualy label later.
For this function we need to dfine the targetd kernel size based on our analysis (--kernelGran) 
we will set a base directory: and use a walk methods to get all the files and suffle, creat a training set from 4 images just for example 
python .\AIPyS\CLI\set_parameters.py --kernelGran 6 --trainingDataPath D:\Gil\images\pex_project\20X --imagesN 5
python .\AIPyS\CLI\aipys.py --option cp_gran_table_gen

python .\AIPyS\CLI\set_parameters.py --outPath D:\Gil\images\pex_project\AIPyS_output_images

Now the user will label tables so we define the image path and the labeld path:
python .\AIPyS\CLI\set_parameters.py --imagePath D:\Gil\images\pex_project\AIPyS_output_images\imageSequence\images --dataPath D:\Gil\images\pex_project\AIPyS_output_images\imageSequence\data
python .\AIPyS\CLI\aipys.py --option dataLabeling

Note for testing my code:
for saving time 1) label 1 for pex 2) I have meraged (concatnate) the tabled saved it to table filder. Copy images into folder
python .\AIPyS\CLI\set_parameters.py --kernelGran 6 --trainingDataPath D:\Gil\images\pex_project\20X\PEX3 --imagesN 2 --outPath D:\Gil\images\pex_project\AIPyS_output_images\pexanalysis
python .\AIPyS\CLI\aipys.py --option cp_gran_table_gen
python .\AIPyS\CLI\set_parameters.py --kernelGran 6 --trainingDataPath D:\Gil\images\pex_project\20X\WT --imagesN 2 --outPath D:\Gil\images\pex_project\AIPyS_output_images\wtanalysis
python .\AIPyS\CLI\aipys.py --option cp_gran_table_gen

```
import os
import shutil
import h5py
from pathlib import Path
import numpy as np
import argparse
import pdb

user_parameters_path = os.path.join(Path.home(), '.AIPyS', 'parameters.h5')
def update_user_parameters(parameter_updates):
    """Example function to update parameters in the user's parameters.h5 file."""
    with h5py.File(user_parameters_path, 'r+') as hdf:
        for key, value in parameter_updates.items():
            if key in hdf:
                value = 'None' if value is None else value
                if isinstance(value, str):
                    hdf[key][()] = np.array(value, dtype=h5py.special_dtype(vlen=str))
                else:
                    hdf[key][...] = value
            else:
                # If the key does not exist in the HDF5 file, create a new dataset.
                if isinstance(value, str):
                    dt = h5py.special_dtype(vlen=str)
                    hdf.create_dataset(key, data=np.array(value, dtype=dt), dtype=dt)
                else:
                    hdf.create_dataset(key, data=value)
                print(f"'{key}' added to or updated in the HDF5 file with value: {value}")

parameter_updates = {"areaSel":1000}
update_user_parameters(parameter_updates)
```

Next the datViz app is run:
python .\AIPyS\CLI\set_parameters.py --imagePath D:\Gil\images\pex_project\AIPyS_output_images\table_example\images --dataPath D:\Gil\images\pex_project\AIPyS_output_images\table_example
python .\AIPyS\CLI\aipys.py --option data_viz


Now data will be trained. The cutoff area will be set on 400 any cell below 400 will. Also a thershold will be saved.   
python .\AIPyS\CLI\set_parameters.py --dataPath D:\Gil\images\pex_project\AIPyS_output_images\table_example --outPath D:\Gil\images\pex_project\AIPyS_output_images --imW 10 --imH 10 --thold 0.7 --areaSel 1000 --fractionData 50
python .\AIPyS\CLI\aipys.py --option modelBuild

After model is ready, one can run deployBuild. will image for analysis and report path. It uses the intercept and slope value from modelBuid run. 
python .\AIPyS\CLI\set_parameters.py --Image_name D:\Gil\images\pex_project\022224\2.tif --outPath D:\Gil\images\pex_project\AIPyS_output_images\outproc_temp
python .\AIPyS\CLI\aipys.py --option deployBuild



Notes:
reset paramtertable:
python .\AIPyS\CLI\loadParameters.py --help
python .\AIPyS\CLI\loadParameters.py --select generate
python .\AIPyS\CLI\loadParameters.py --select reset
python .\AIPyS\CLI\loadParameters.py --select display